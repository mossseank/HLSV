-- The HLSV project and all associated files and assets, including this file, are licensed under the MIT license, the
--    text of which can be found in the LICENSE file at the root of this project, and is available online at
--    (https://opensource.org/licenses/MIT). In the event of redistribution of this code, this header, or the text of
--    the license itself, must not be removed from the source files or assets in which they appear.
-- Copyright (c) 2019 Sean Moss [moss.seank@gmail.com]

-- This is the premake solution generation script for the HLSV project. It is written in Lua.


-- Project workspace
workspace "HLSV"
	-- Shared settings
	language "C++"
	cppdialect "C++14"
	location "build"
	configurations { "DebStatic", "DebShared", "RelStatic", "RelShared" }
	platforms { "x64" }
	architecture "x86_64"
	flags { "MultiProcessorCompile" }

	-- Output directories
	filter { "configurations:DebStatic" }
		targetdir "build/bin/Debug/Static"
	filter { "configurations:DebShared" }
		targetdir "build/bin/Debug/Shared"
	filter { "configurations:RelStatic" }
		targetdir "build/bin/Release/Static"
	filter { "configurations:RelShared" }
		targetdir "build/bin/Release/Shared"
	filter {}

	-- Debug/Release settings
	filter { "configurations:Deb*" }
		runtime "Debug"
		defines { "_HLSV_DEBUG" }
		symbols "On"
		optimize "Debug"
	filter { "configurations:Rel*" }
		runtime "Release"
		defines { "_HLSV_NDEBUG" }
		symbols "Off"
		optimize "Speed"
	filter {}

	-- Compiler/Platform settings
	filter { "system:windows" }
		systemversion "latest"
		disablewarnings { "4099", "4251", "4275" }
		staticruntime "off"
		defines { "_CRT_SECURE_NO_WARNINGS" }
	filter { "toolset:gcc or clang" }
		buildoptions { "-fpermissive", "-fvisibility=hidden", "-fPIC" }
	filter {}


-- Base compiler and reflection library
project "hlsv"
	-- Project settings
	includedirs { "include", "include/antlr" }
	defines { "_HLSV_BUILD", "ANTLR4CPP_STATIC" }
	targetname "hlsv"

	-- Project output types
	filter { "configurations:*Static" }
		kind "StaticLib"
		defines { "HLSV_STATIC" }
	filter { "configurations:*Shared" }
		kind "SharedLib"
	filter {}

	-- Library paths
	filter { "system:windows" }
		libdirs { "./libs/vs2019" }
	filter { "system:linux" }
		libdirs { "./libs/linux" }
	filter { "system:macosx" }
		libdirs { "./libs/macosx" }
	filter {}

	-- Libraries
	filter { "system:windows", "configurations:Deb*" }
		links { "antlr4-runtime-static-d" }
	filter { "system:not windows or configurations:Rel*" }
		links { "antlr4-runtime-static" }
	filter { "system:not windows", "configurations:*Static" }
		-- This is required because premake refuses to follow static dependencies, so the link to the antlr runtime
		--    is COMPLETELY ignored by gcc and clang. This is a manual linking of static hlsv with the runtime.
		--    Adding this feature has been discussed for over 3 years now, and has yet to be included.
		postbuildcommands {
			"cd %{cfg.buildtarget.directory} && "..
			"mkdir tmp && cd tmp && "..
			"mv ../libhlsv.a . && ar -x libhlsv.a && "..
			"cp ../../../../../libs/%{cfg.system}/libantlr4-runtime-static.a . && ar -x libantlr4-runtime-static.a && "..
			"ar -rcs ../libhlsv.a *.o && "..
			"cd .. && rm -rf tmp/"
		}
	filter {}

	-- Project files
	files {
		"include/hlsv/**.hpp", -- Public API C++ Headers
		"include/hlsv/**.h",   -- Public API C Headers
		"hlsv/**.hpp",         -- Private Headers
		"hlsv/**.inl",         -- Template Implementations
		"hlsv/**.cpp",         -- Sources
		"generated/**.h",      -- Generated Grammar Headers
		"generated/**.cpp"     -- Generated Grammar Sources
	}


-- Command-line compiler
project "hlsvc"
	-- Project settings
	includedirs { "include" }
	defines { }
	targetname "hlsvc"
	kind "ConsoleApp"
	dependson { "hlsv" }
	links { "hlsv" }

	-- Required for static linking
	filter { "configurations:*Static" }
		defines { "HLSV_STATIC" }
	filter {}

	-- Project files
	files {
		"hlsvc/**.hpp", -- Private Headers
		"hlsvc/**.inl", -- Template Implementations
		"hlsvc/**.cpp"  -- Sources
	}
